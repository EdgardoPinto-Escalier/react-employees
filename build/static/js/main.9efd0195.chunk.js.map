{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","employees.js","components/Footer.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","photo","role","email","id","className","src","alt","CardList","employees","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","username","Footer","href","target","rel","App","onSearchChange","event","setState","searchfield","value","state","filteredemployees","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAbF,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAgB,EAATC,GACxC,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,iBAAYL,GAASM,IAAI,WAAWF,UAAU,wCACtD,6BACE,4BAAKL,GACL,4BAAKE,GACL,4BAAKC,MCcEK,EArBE,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClB,OACE,yBAAKJ,UAAU,wBAEXI,EAAUC,KAAI,SAACC,EAAMC,GACnB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,GAAIK,EAAUG,GAAGR,GACjBH,MAAOQ,EAAUG,GAAGX,MACpBD,KAAMS,EAAUG,GAAGZ,KACnBE,KAAMO,EAAUG,GAAGV,KACnBC,MAAOM,EAAUG,GAAGT,aCCnBW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,MACVY,KAAK,SACLC,YAAY,mBACZC,SAAUH,MCVLP,EAAY,CACvB,CACEL,GAAI,EACJH,MAAO,YACPD,KAAM,iBACNoB,SAAU,SACVlB,KAAM,aACNC,MAAO,2BAET,CACEC,GAAI,EACJH,MAAO,WACPD,KAAM,cACNoB,SAAU,SACVlB,KAAM,qBACNC,MAAO,wBAET,CACEC,GAAI,EACJH,MAAO,WACPD,KAAM,eACNoB,SAAU,MACVlB,KAAM,cACNC,MAAO,yBAET,CACEC,GAAI,EACJH,MAAO,YACPD,KAAM,YACNoB,SAAU,OACVlB,KAAM,kBACNC,MAAO,sBAET,CACEC,GAAI,EACJH,MAAO,YACPD,KAAM,cACNoB,SAAU,QACVlB,KAAM,kBACNC,MAAO,wBAET,CACEC,GAAI,EACJH,MAAO,UACPD,KAAM,cACNoB,SAAU,MACVlB,KAAM,gBACNC,MAAO,wBAET,CACEC,GAAI,EACJH,MAAO,aACPD,KAAM,cACNoB,SAAU,SACVlB,KAAM,sBACNC,MAAO,wBAET,CACEC,GAAI,EACJH,MAAO,UACPD,KAAM,cACNoB,SAAU,QACVlB,KAAM,oBACNC,MAAO,wBACN,CACDC,GAAI,EACJH,MAAO,aACPD,KAAM,kBACNoB,SAAU,QACVlB,KAAM,iBACNC,MAAO,4BACN,CACDC,GAAI,GACJH,MAAO,aACPD,KAAM,gBACNoB,SAAU,QACVlB,KAAM,gBACNC,MAAO,0BACN,CACDC,GAAI,GACJH,MAAO,aACPD,KAAM,gBACNoB,SAAU,SACVlB,KAAM,gBACNC,MAAO,0BACN,CACDC,GAAI,GACJH,MAAO,cACPD,KAAM,gBACNoB,SAAU,OACVlB,KAAM,gBACNC,MAAO,2BCjFIkB,EARA,WACb,OACE,6BACE,uCAAY,uBAAGC,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBAAxD,uBC8BHC,E,YA5Bb,aAAe,IAAD,8BACZ,+CAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMJ,OAAOO,SAP1C,EAAKC,MAAQ,CACXtB,UAAWA,EACXoB,YAAa,IAJH,E,sEAaJ,IAAD,OACDG,EAAoBC,KAAKF,MAAMtB,UAAUyB,QAAO,SAAAzB,GACpD,OAAOA,EAAUT,KAAKmC,cAAcC,SAAS,EAAKL,MAAMF,YAAYM,kBAEtE,OACE,yBAAK9B,UAAU,aACb,yCACA,kBAAC,EAAD,CAAWW,aAAciB,KAAKP,iBAC9B,kBAAC,EAAD,CAAUjB,UAAWuB,IACrB,kBAAC,EAAD,W,GAvBUK,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9efd0195.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({ name, photo, role, email, id }) => {\n  return (\n    <div className=\"tc ba dim b--black-10 bg-light br3 pa3 ma2 grow bw2\">\n      <img src={`images/${photo}`} alt=\"employee\" className='br-100 h4 w4 dib ba pa2 b--black-10'/>\n      <div>\n        <h2>{name}</h2>\n        <h3>{role}</h3>\n        <h3>{email}</h3>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ employees }) => {\n  return (\n    <div className='center container pa3'>\n      {\n        employees.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={employees[i].id}\n              photo={employees[i].photo}\n              name={employees[i].name}\n              role={employees[i].role}\n              email={employees[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ({ searchField, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa2'\n        type=\"search\" \n        placeholder='Search Employees'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","export const employees = [\n  {\n    id: 1,\n    photo: 'Laura.jpg',\n    name: 'Laura Williams',\n    username: 'Lolita',\n    role: 'HR Officer',\n    email: 'laura.williams@acme.com'\n  },\n  {\n    id: 2,\n    photo: 'John.jpg',\n    name: 'John Thomas',\n    username: 'Johnny',\n    role: 'Software Developer',\n    email: 'john.thomas@acme.com'\n  },\n  {\n    id: 3,\n    photo: 'Jane.jpg',\n    name: 'Jane Maxwell',\n    username: 'Jen',\n    role: 'UX Designer',\n    email: 'jane.maxwell@acme.com'\n  },\n  {\n    id: 4,\n    photo: 'Peter.jpg',\n    name: 'Peter Fox',\n    username: 'Pete',\n    role: 'System Engineer',\n    email: 'peter.fox@acme.com'\n  },\n  {\n    id: 5,\n    photo: 'Megan.jpg',\n    name: 'Megan Lopez',\n    username: 'Megan',\n    role: 'Product Manager',\n    email: 'megan.lopez@acme.com'\n  },\n  {\n    id: 6,\n    photo: 'Max.jpg',\n    name: 'Max Thomsom',\n    username: 'Max',\n    role: 'Test Engineer',\n    email: 'max.thomsom@acme.com'\n  },\n  {\n    id: 7,\n    photo: 'Louise.jpg',\n    name: 'Louise Kent',\n    username: 'Louise',\n    role: 'Marketing Assistant',\n    email: 'louise.kent@acme.com'\n  },\n  {\n    id: 8,\n    photo: 'Tom.jpg',\n    name: 'Tom Jackson',\n    username: 'Tommy',\n    role: 'Software Enginner',\n    email: 'louise.kent@acme.com'\n  }, {\n    id: 9,\n    photo: 'Angela.jpg',\n    name: 'Angela Keystone',\n    username: 'Angie',\n    role: 'Online Manager',\n    email: 'angela.keystone@acme.com'\n  }, {\n    id: 10,\n    photo: 'Edward.jpg',\n    name: 'Edward Thomas',\n    username: 'Eddie',\n    role: 'IT Specialist',\n    email: 'edward.thomas@acme.com'\n  }, {\n    id: 11,\n    photo: 'Nicole.jpg',\n    name: 'Nicole Hudson',\n    username: 'Nicole',\n    role: 'Sales Manager',\n    email: 'nicole.hudson@acme.com'\n  }, {\n    id: 12,\n    photo: 'William.jpg',\n    name: 'William Acker',\n    username: 'Will',\n    role: 'Web Developer',\n    email: 'william.acker@acme.com'\n  }\n]","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div>\n      <p>Photo by <a href=\"https://generated.photos/\" target=\"_blank\" rel=\"noopener noreferrer\">Generated Photos</a></p>\n    </div>\n  );\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport { employees } from '../employees';\nimport Footer from '../components/Footer';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      employees: employees,\n      searchfield: ''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n\n  }\n\n  render() {\n    const filteredemployees = this.state.employees.filter(employees => {\n      return employees.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n    return (\n      <div className='tc center'>\n        <h1>EMPLOYEES</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <CardList employees={filteredemployees} />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}